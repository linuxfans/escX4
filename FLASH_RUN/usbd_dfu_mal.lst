   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 4
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"usbd_dfu_mal.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.MAL_CheckAdd,"ax",%progbits
  20              		.align	1
  21              		.thumb
  22              		.thumb_func
  24              	MAL_CheckAdd:
  25              	.LFB116:
  26              		.file 1 "Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c"
   1:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** /**
   2:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   ******************************************************************************
   3:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   * @file    usbd_dfu_mal.c
   4:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   * @author  MCD Application Team
   5:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   * @version V1.1.0
   6:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   * @date    19-March-2012
   7:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   * @brief   Generic media access Layer.
   8:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   ******************************************************************************
   9:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   * @attention
  10:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   *
  11:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
  12:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   *
  13:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  14:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   * You may not use this file except in compliance with the License.
  15:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   * You may obtain a copy of the License at:
  16:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   *
  17:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  18:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   *
  19:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   * Unless required by applicable law or agreed to in writing, software 
  20:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  21:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  22:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   * See the License for the specific language governing permissions and
  23:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   * limitations under the License.
  24:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   *
  25:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   ******************************************************************************
  26:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   */ 
  27:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** 
  28:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** /* Includes ------------------------------------------------------------------*/
  29:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** #include "usbd_dfu_mal.h"
  30:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** 
  31:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** #include "usbd_flash_if.h"
  32:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** 
  33:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** #ifdef DFU_MAL_SUPPORT_OTP
  34:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****  #include "usbd_otp_if.h"
  35:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** #endif
  36:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** 
  37:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** #ifdef DFU_MAL_SUPPORT_MEM
  38:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****  #include "usbd_mem_if_template.h"
  39:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** #endif
  40:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** 
  41:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** /* Private typedef -----------------------------------------------------------*/
  42:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** /* Private define ------------------------------------------------------------*/
  43:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** /* Private macro -------------------------------------------------------------*/
  44:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** /* Private variables ---------------------------------------------------------*/
  45:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** 
  46:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** /* Global Memories callback and string descriptors reference tables.
  47:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****    To add a new memory, modify the value of MAX_USED_MEDIA in usbd_dfu_mal.h
  48:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****    and add the pointer to the callback structure in this table.
  49:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****    Then add the pointer to the memory string descriptor in usbd_dfu_StringDesc table.
  50:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****    No other operation is required. */
  51:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** DFU_MAL_Prop_TypeDef* tMALTab[MAX_USED_MEDIA] = {
  52:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****     &DFU_Flash_cb
  53:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** #ifdef DFU_MAL_SUPPORT_OTP
  54:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   , &DFU_Otp_cb
  55:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** #endif
  56:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** #ifdef DFU_MAL_SUPPORT_MEM
  57:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   , &DFU_Mem_cb
  58:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** #endif
  59:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** };
  60:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** 
  61:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** #ifdef USB_OTG_HS_INTERNAL_DMA_ENABLED
  62:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   #if defined ( __ICCARM__ ) /*!< IAR Compiler */
  63:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****     #pragma data_alignment=4   
  64:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   #endif
  65:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** #endif /* USB_OTG_HS_INTERNAL_DMA_ENABLED */
  66:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** 
  67:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** __ALIGN_BEGIN const uint8_t* usbd_dfu_StringDesc[MAX_USED_MEDIA] __ALIGN_END  = {
  68:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****     FLASH_IF_STRING
  69:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** #ifdef DFU_MAL_SUPPORT_OTP
  70:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   , OTP_IF_STRING
  71:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** #endif
  72:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** #ifdef DFU_MAL_SUPPORT_MEM
  73:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   , MEM_IF_STRING
  74:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** #endif
  75:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** };
  76:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** 
  77:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** #ifdef USB_OTG_HS_INTERNAL_DMA_ENABLED
  78:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   #if defined ( __ICCARM__ ) /*!< IAR Compiler */
  79:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****     #pragma data_alignment=4   
  80:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   #endif
  81:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** #endif /* USB_OTG_HS_INTERNAL_DMA_ENABLED */
  82:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** /* RAM Buffer for Downloaded Data */
  83:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** __ALIGN_BEGIN uint8_t  MAL_Buffer[XFERSIZE] __ALIGN_END ; 
  84:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** 
  85:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** /* Private function prototypes -----------------------------------------------*/
  86:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** static uint8_t  MAL_CheckAdd  (uint32_t Add);
  87:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** /* Private functions ---------------------------------------------------------*/
  88:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** 
  89:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** /**
  90:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   * @brief  MAL_Init
  91:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   *         Initializes the Media on the STM32
  92:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   * @param  None
  93:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   * @retval Result of the opeartion (MAL_OK in all cases)
  94:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   */
  95:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** uint16_t MAL_Init(void)
  96:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** {
  97:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   uint32_t memIdx = 0;
  98:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   
  99:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   /* Init all supported memories */
 100:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   for(memIdx = 0; memIdx < MAX_USED_MEDIA; memIdx++)
 101:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   {
 102:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****     /* If the check addres is positive, exit with the memory index */
 103:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****     if (tMALTab[memIdx]->pMAL_Init != NULL)
 104:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****     {
 105:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****       tMALTab[memIdx]->pMAL_Init();
 106:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****     }
 107:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   }
 108:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** 
 109:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   return MAL_OK;
 110:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** }
 111:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** 
 112:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** /**
 113:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   * @brief  MAL_DeInit
 114:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   *         DeInitializes the Media on the STM32
 115:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   * @param  None
 116:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   * @retval Result of the opeartion (MAL_OK in all cases)
 117:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   */
 118:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** uint16_t MAL_DeInit(void)
 119:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** {
 120:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   uint32_t memIdx = 0;
 121:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   
 122:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   /* Init all supported memories */
 123:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   for(memIdx = 0; memIdx < MAX_USED_MEDIA; memIdx++)
 124:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   {
 125:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****     /* Check if the command is supported */
 126:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****     if (tMALTab[memIdx]->pMAL_DeInit != NULL)
 127:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****     {
 128:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****       tMALTab[memIdx]->pMAL_DeInit();
 129:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****     }
 130:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   }
 131:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** 
 132:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   return MAL_OK;
 133:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** }
 134:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** 
 135:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** /**
 136:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   * @brief  MAL_Erase
 137:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   *         Erase a sector of memory.
 138:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   * @param  Add: Sector address/code
 139:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   * @retval Result of the opeartion: MAL_OK if all operations are OK else MAL_FAIL
 140:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   */
 141:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** uint16_t MAL_Erase(uint32_t Add)
 142:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** {
 143:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   uint32_t memIdx = MAL_CheckAdd(Add);
 144:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****  
 145:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   /* Check if the area is protected */
 146:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   if (DFU_MAL_IS_PROTECTED_AREA(Add))
 147:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   {
 148:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****     return MAL_FAIL;
 149:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   }    
 150:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   
 151:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   if (memIdx < MAX_USED_MEDIA)
 152:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   {
 153:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****     /* Check if the command is supported */
 154:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****     if (tMALTab[memIdx]->pMAL_Erase != NULL)
 155:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****     {
 156:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****       return tMALTab[memIdx]->pMAL_Erase(Add);
 157:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****     }
 158:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****     else
 159:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****     {
 160:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****       return MAL_FAIL;
 161:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****     }
 162:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   }
 163:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   else
 164:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   {
 165:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****     return MAL_FAIL;
 166:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   }
 167:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** }
 168:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** 
 169:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** /**
 170:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   * @brief  MAL_Write
 171:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   *         Write sectors of memory.
 172:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   * @param  Add: Sector address/code
 173:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   * @param  Len: Number of data to be written (in bytes)
 174:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   * @retval Result of the opeartion: MAL_OK if all operations are OK else MAL_FAIL
 175:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   */
 176:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** uint16_t MAL_Write (uint32_t Add, uint32_t Len)
 177:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** {
 178:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   uint32_t memIdx = MAL_CheckAdd(Add);
 179:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****  
 180:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   /* Check if the area is protected */
 181:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   if (DFU_MAL_IS_PROTECTED_AREA(Add))
 182:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   {
 183:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****     return MAL_FAIL;
 184:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   }   
 185:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   
 186:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   if (memIdx < MAX_USED_MEDIA)
 187:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   {
 188:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****     /* Check if the command is supported */
 189:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****     if (tMALTab[memIdx]->pMAL_Write != NULL)
 190:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****     {
 191:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****       return tMALTab[memIdx]->pMAL_Write(Add, Len);
 192:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****     }
 193:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****     else
 194:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****     {
 195:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****       return MAL_FAIL;
 196:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****     }    
 197:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   }
 198:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   else
 199:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   {
 200:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****     return MAL_FAIL;
 201:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   }
 202:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** }
 203:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** 
 204:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** /**
 205:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   * @brief  MAL_Read
 206:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   *         Read sectors of memory.
 207:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   * @param  Add: Sector address/code
 208:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   * @param  Len: Number of data to be written (in bytes)
 209:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   * @retval Buffer pointer
 210:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   */
 211:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** uint8_t *MAL_Read (uint32_t Add, uint32_t Len)
 212:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** {
 213:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   uint32_t memIdx = MAL_CheckAdd(Add);
 214:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   
 215:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   if (memIdx < MAX_USED_MEDIA)
 216:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   {
 217:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****     /* Check if the command is supported */
 218:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****     if (tMALTab[memIdx]->pMAL_Read != NULL)
 219:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****     {
 220:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****       return tMALTab[memIdx]->pMAL_Read(Add, Len);
 221:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****     }
 222:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****     else
 223:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****     {
 224:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****       return MAL_Buffer;
 225:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****     }     
 226:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   }
 227:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   else
 228:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   {
 229:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****     return MAL_Buffer;
 230:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   }
 231:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** }
 232:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** 
 233:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** /**
 234:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   * @brief  MAL_GetStatus
 235:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   *         Get the status of a given memory.
 236:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   * @param  Add: Sector address/code (allow to determine which memory will be addressed)
 237:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   * @param  Cmd: 0 for erase and 1 for write
 238:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   * @param  buffer: pointer to the buffer where the status data will be stored.
 239:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   * @retval Buffer pointer
 240:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   */
 241:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** uint16_t MAL_GetStatus(uint32_t Add , uint8_t Cmd, uint8_t *buffer)
 242:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** {
 243:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   uint32_t memIdx = MAL_CheckAdd(Add);
 244:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   
 245:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   if (memIdx < MAX_USED_MEDIA)
 246:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   {
 247:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****     if (Cmd & 0x01)
 248:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****     {
 249:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****       SET_POLLING_TIMING(tMALTab[memIdx]->EraseTiming);
 250:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****     }
 251:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****     else
 252:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****     {
 253:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****       SET_POLLING_TIMING(tMALTab[memIdx]->WriteTiming);
 254:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****     }
 255:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****     
 256:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****     return MAL_OK;
 257:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   }
 258:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   else
 259:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   {
 260:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****     return MAL_FAIL;
 261:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   }
 262:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** }
 263:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** 
 264:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** /**
 265:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   * @brief  MAL_CheckAdd
 266:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   *         Determine which memory should be managed.
 267:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   * @param  Add: Sector address/code (allow to determine which memory will be addressed)
 268:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   * @retval Index of the addressed memory.
 269:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   */
 270:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** static uint8_t  MAL_CheckAdd(uint32_t Add)
 271:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** {
  27              		.loc 1 271 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              	.LVL0:
  32 0000 08B5     		push	{r3, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 14, -4
  36              		.cfi_offset 3, -8
 272:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   uint32_t memIdx = 0;
 273:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   
 274:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   /* Check with all supported memories */
 275:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   for(memIdx = 0; memIdx < MAX_USED_MEDIA; memIdx++)
 276:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   {
 277:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****     /* If the check addres is positive, exit with the memory index */
 278:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****     if (tMALTab[memIdx]->pMAL_CheckAdd(Add) == MAL_OK)
  37              		.loc 1 278 0
  38 0002 044B     		ldr	r3, .L2
  39 0004 1B68     		ldr	r3, [r3, #0]
  40 0006 9B69     		ldr	r3, [r3, #24]
  41 0008 9847     		blx	r3
  42              	.LVL1:
  43 000a 0030     		adds	r0, r0, #0
  44 000c 18BF     		it	ne
  45 000e 0120     		movne	r0, #1
 279:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****     {
 280:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****       return memIdx;
 281:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****     }
 282:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   }
 283:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   /* If no memory found, return MAX_USED_MEDIA */
 284:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   return (MAX_USED_MEDIA);
 285:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** }
  46              		.loc 1 285 0
  47 0010 08BD     		pop	{r3, pc}
  48              	.L3:
  49 0012 00BF     		.align	2
  50              	.L2:
  51 0014 00000000 		.word	.LANCHOR0
  52              		.cfi_endproc
  53              	.LFE116:
  55              		.section	.text.MAL_Init,"ax",%progbits
  56              		.align	1
  57              		.global	MAL_Init
  58              		.thumb
  59              		.thumb_func
  61              	MAL_Init:
  62              	.LFB110:
  96:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** {
  63              		.loc 1 96 0
  64              		.cfi_startproc
  65              		@ args = 0, pretend = 0, frame = 0
  66              		@ frame_needed = 0, uses_anonymous_args = 0
  67              	.LVL2:
  68 0000 08B5     		push	{r3, lr}
  69              	.LCFI1:
  70              		.cfi_def_cfa_offset 8
  71              		.cfi_offset 14, -4
  72              		.cfi_offset 3, -8
 103:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****     if (tMALTab[memIdx]->pMAL_Init != NULL)
  73              		.loc 1 103 0
  74 0002 034B     		ldr	r3, .L6
  75 0004 1B68     		ldr	r3, [r3, #0]
  76 0006 5B68     		ldr	r3, [r3, #4]
  77 0008 03B1     		cbz	r3, .L5
 105:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****       tMALTab[memIdx]->pMAL_Init();
  78              		.loc 1 105 0
  79 000a 9847     		blx	r3
  80              	.L5:
  81              	.LVL3:
 110:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** }
  82              		.loc 1 110 0
  83 000c 0020     		movs	r0, #0
  84 000e 08BD     		pop	{r3, pc}
  85              	.L7:
  86              		.align	2
  87              	.L6:
  88 0010 00000000 		.word	.LANCHOR0
  89              		.cfi_endproc
  90              	.LFE110:
  92              		.section	.text.MAL_DeInit,"ax",%progbits
  93              		.align	1
  94              		.global	MAL_DeInit
  95              		.thumb
  96              		.thumb_func
  98              	MAL_DeInit:
  99              	.LFB111:
 119:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** {
 100              		.loc 1 119 0
 101              		.cfi_startproc
 102              		@ args = 0, pretend = 0, frame = 0
 103              		@ frame_needed = 0, uses_anonymous_args = 0
 104              	.LVL4:
 105 0000 08B5     		push	{r3, lr}
 106              	.LCFI2:
 107              		.cfi_def_cfa_offset 8
 108              		.cfi_offset 14, -4
 109              		.cfi_offset 3, -8
 126:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****     if (tMALTab[memIdx]->pMAL_DeInit != NULL)
 110              		.loc 1 126 0
 111 0002 034B     		ldr	r3, .L10
 112 0004 1B68     		ldr	r3, [r3, #0]
 113 0006 9B68     		ldr	r3, [r3, #8]
 114 0008 03B1     		cbz	r3, .L9
 128:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****       tMALTab[memIdx]->pMAL_DeInit();
 115              		.loc 1 128 0
 116 000a 9847     		blx	r3
 117              	.L9:
 118              	.LVL5:
 133:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** }
 119              		.loc 1 133 0
 120 000c 0020     		movs	r0, #0
 121 000e 08BD     		pop	{r3, pc}
 122              	.L11:
 123              		.align	2
 124              	.L10:
 125 0010 00000000 		.word	.LANCHOR0
 126              		.cfi_endproc
 127              	.LFE111:
 129              		.section	.text.MAL_Erase,"ax",%progbits
 130              		.align	1
 131              		.global	MAL_Erase
 132              		.thumb
 133              		.thumb_func
 135              	MAL_Erase:
 136              	.LFB112:
 142:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** {
 137              		.loc 1 142 0
 138              		.cfi_startproc
 139              		@ args = 0, pretend = 0, frame = 0
 140              		@ frame_needed = 0, uses_anonymous_args = 0
 141              	.LVL6:
 142 0000 10B5     		push	{r4, lr}
 143              	.LCFI3:
 144              		.cfi_def_cfa_offset 8
 145              		.cfi_offset 14, -4
 146              		.cfi_offset 4, -8
 142:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** {
 147              		.loc 1 142 0
 148 0002 0446     		mov	r4, r0
 143:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   uint32_t memIdx = MAL_CheckAdd(Add);
 149              		.loc 1 143 0
 150 0004 FFF7FEFF 		bl	MAL_CheckAdd
 151              	.LVL7:
 151:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   if (memIdx < MAX_USED_MEDIA)
 152              		.loc 1 151 0
 153 0008 30B9     		cbnz	r0, .L14
 154:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****     if (tMALTab[memIdx]->pMAL_Erase != NULL)
 154              		.loc 1 154 0
 155 000a 054B     		ldr	r3, .L16
 156 000c 1B68     		ldr	r3, [r3, #0]
 157 000e DB68     		ldr	r3, [r3, #12]
 158 0010 23B1     		cbz	r3, .L15
 156:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****       return tMALTab[memIdx]->pMAL_Erase(Add);
 159              		.loc 1 156 0
 160 0012 2046     		mov	r0, r4
 161              	.LVL8:
 162 0014 9847     		blx	r3
 163 0016 10BD     		pop	{r4, pc}
 164              	.LVL9:
 165              	.L14:
 165:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****     return MAL_FAIL;
 166              		.loc 1 165 0
 167 0018 0120     		movs	r0, #1
 168              	.LVL10:
 169 001a 10BD     		pop	{r4, pc}
 170              	.LVL11:
 171              	.L15:
 160:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****       return MAL_FAIL;
 172              		.loc 1 160 0
 173 001c 0120     		movs	r0, #1
 174              	.LVL12:
 167:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** }
 175              		.loc 1 167 0
 176 001e 10BD     		pop	{r4, pc}
 177              	.L17:
 178              		.align	2
 179              	.L16:
 180 0020 00000000 		.word	.LANCHOR0
 181              		.cfi_endproc
 182              	.LFE112:
 184              		.section	.text.MAL_Write,"ax",%progbits
 185              		.align	1
 186              		.global	MAL_Write
 187              		.thumb
 188              		.thumb_func
 190              	MAL_Write:
 191              	.LFB113:
 177:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** {
 192              		.loc 1 177 0
 193              		.cfi_startproc
 194              		@ args = 0, pretend = 0, frame = 0
 195              		@ frame_needed = 0, uses_anonymous_args = 0
 196              	.LVL13:
 197 0000 38B5     		push	{r3, r4, r5, lr}
 198              	.LCFI4:
 199              		.cfi_def_cfa_offset 16
 200              		.cfi_offset 14, -4
 201              		.cfi_offset 5, -8
 202              		.cfi_offset 4, -12
 203              		.cfi_offset 3, -16
 177:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** {
 204              		.loc 1 177 0
 205 0002 0446     		mov	r4, r0
 206 0004 0D46     		mov	r5, r1
 178:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   uint32_t memIdx = MAL_CheckAdd(Add);
 207              		.loc 1 178 0
 208 0006 FFF7FEFF 		bl	MAL_CheckAdd
 209              	.LVL14:
 186:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   if (memIdx < MAX_USED_MEDIA)
 210              		.loc 1 186 0
 211 000a 38B9     		cbnz	r0, .L20
 189:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****     if (tMALTab[memIdx]->pMAL_Write != NULL)
 212              		.loc 1 189 0
 213 000c 054B     		ldr	r3, .L22
 214 000e 1B68     		ldr	r3, [r3, #0]
 215 0010 1B69     		ldr	r3, [r3, #16]
 216 0012 2BB1     		cbz	r3, .L21
 191:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****       return tMALTab[memIdx]->pMAL_Write(Add, Len);
 217              		.loc 1 191 0
 218 0014 2046     		mov	r0, r4
 219              	.LVL15:
 220 0016 2946     		mov	r1, r5
 221 0018 9847     		blx	r3
 222 001a 38BD     		pop	{r3, r4, r5, pc}
 223              	.LVL16:
 224              	.L20:
 200:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****     return MAL_FAIL;
 225              		.loc 1 200 0
 226 001c 0120     		movs	r0, #1
 227              	.LVL17:
 228 001e 38BD     		pop	{r3, r4, r5, pc}
 229              	.LVL18:
 230              	.L21:
 195:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****       return MAL_FAIL;
 231              		.loc 1 195 0
 232 0020 0120     		movs	r0, #1
 233              	.LVL19:
 202:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** }
 234              		.loc 1 202 0
 235 0022 38BD     		pop	{r3, r4, r5, pc}
 236              	.L23:
 237              		.align	2
 238              	.L22:
 239 0024 00000000 		.word	.LANCHOR0
 240              		.cfi_endproc
 241              	.LFE113:
 243              		.section	.text.MAL_Read,"ax",%progbits
 244              		.align	1
 245              		.global	MAL_Read
 246              		.thumb
 247              		.thumb_func
 249              	MAL_Read:
 250              	.LFB114:
 212:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** {
 251              		.loc 1 212 0
 252              		.cfi_startproc
 253              		@ args = 0, pretend = 0, frame = 0
 254              		@ frame_needed = 0, uses_anonymous_args = 0
 255              	.LVL20:
 256 0000 38B5     		push	{r3, r4, r5, lr}
 257              	.LCFI5:
 258              		.cfi_def_cfa_offset 16
 259              		.cfi_offset 14, -4
 260              		.cfi_offset 5, -8
 261              		.cfi_offset 4, -12
 262              		.cfi_offset 3, -16
 212:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** {
 263              		.loc 1 212 0
 264 0002 0446     		mov	r4, r0
 265 0004 0D46     		mov	r5, r1
 213:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   uint32_t memIdx = MAL_CheckAdd(Add);
 266              		.loc 1 213 0
 267 0006 FFF7FEFF 		bl	MAL_CheckAdd
 268              	.LVL21:
 215:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   if (memIdx < MAX_USED_MEDIA)
 269              		.loc 1 215 0
 270 000a 38B9     		cbnz	r0, .L26
 218:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****     if (tMALTab[memIdx]->pMAL_Read != NULL)
 271              		.loc 1 218 0
 272 000c 054B     		ldr	r3, .L28
 273 000e 1B68     		ldr	r3, [r3, #0]
 274 0010 5B69     		ldr	r3, [r3, #20]
 275 0012 2BB1     		cbz	r3, .L27
 220:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****       return tMALTab[memIdx]->pMAL_Read(Add, Len);
 276              		.loc 1 220 0
 277 0014 2046     		mov	r0, r4
 278              	.LVL22:
 279 0016 2946     		mov	r1, r5
 280 0018 9847     		blx	r3
 281 001a 38BD     		pop	{r3, r4, r5, pc}
 282              	.LVL23:
 283              	.L26:
 229:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****     return MAL_Buffer;
 284              		.loc 1 229 0
 285 001c 0248     		ldr	r0, .L28+4
 286              	.LVL24:
 287 001e 38BD     		pop	{r3, r4, r5, pc}
 288              	.LVL25:
 289              	.L27:
 224:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****       return MAL_Buffer;
 290              		.loc 1 224 0
 291 0020 0148     		ldr	r0, .L28+4
 292              	.LVL26:
 231:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** }
 293              		.loc 1 231 0
 294 0022 38BD     		pop	{r3, r4, r5, pc}
 295              	.L29:
 296              		.align	2
 297              	.L28:
 298 0024 00000000 		.word	.LANCHOR0
 299 0028 00000000 		.word	MAL_Buffer
 300              		.cfi_endproc
 301              	.LFE114:
 303              		.section	.text.MAL_GetStatus,"ax",%progbits
 304              		.align	1
 305              		.global	MAL_GetStatus
 306              		.thumb
 307              		.thumb_func
 309              	MAL_GetStatus:
 310              	.LFB115:
 242:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** {
 311              		.loc 1 242 0
 312              		.cfi_startproc
 313              		@ args = 0, pretend = 0, frame = 0
 314              		@ frame_needed = 0, uses_anonymous_args = 0
 315              	.LVL27:
 316 0000 38B5     		push	{r3, r4, r5, lr}
 317              	.LCFI6:
 318              		.cfi_def_cfa_offset 16
 319              		.cfi_offset 14, -4
 320              		.cfi_offset 5, -8
 321              		.cfi_offset 4, -12
 322              		.cfi_offset 3, -16
 242:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** {
 323              		.loc 1 242 0
 324 0002 0C46     		mov	r4, r1
 325 0004 1546     		mov	r5, r2
 243:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   uint32_t memIdx = MAL_CheckAdd(Add);
 326              		.loc 1 243 0
 327 0006 FFF7FEFF 		bl	MAL_CheckAdd
 328              	.LVL28:
 245:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****   if (memIdx < MAX_USED_MEDIA)
 329              		.loc 1 245 0
 330 000a C8B9     		cbnz	r0, .L33
 331 000c 0D4B     		ldr	r3, .L34
 247:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****     if (Cmd & 0x01)
 332              		.loc 1 247 0
 333 000e 14F00104 		ands	r4, r4, #1
 249:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****       SET_POLLING_TIMING(tMALTab[memIdx]->EraseTiming);
 334              		.loc 1 249 0
 335 0012 1A68     		ldr	r2, [r3, #0]
 247:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****     if (Cmd & 0x01)
 336              		.loc 1 247 0
 337 0014 08D0     		beq	.L32
 249:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****       SET_POLLING_TIMING(tMALTab[memIdx]->EraseTiming);
 338              		.loc 1 249 0
 339 0016 D269     		ldr	r2, [r2, #28]
 340 0018 6A70     		strb	r2, [r5, #1]
 341 001a 1A68     		ldr	r2, [r3, #0]
 342 001c 527F     		ldrb	r2, [r2, #29]	@ zero_extendqisi2
 343 001e AA70     		strb	r2, [r5, #2]
 344 0020 1B68     		ldr	r3, [r3, #0]
 345 0022 9B7F     		ldrb	r3, [r3, #30]	@ zero_extendqisi2
 346 0024 EB70     		strb	r3, [r5, #3]
 347 0026 38BD     		pop	{r3, r4, r5, pc}
 348              	.L32:
 253:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****       SET_POLLING_TIMING(tMALTab[memIdx]->WriteTiming);
 349              		.loc 1 253 0
 350 0028 126A     		ldr	r2, [r2, #32]
 351 002a 6A70     		strb	r2, [r5, #1]
 352 002c 1A68     		ldr	r2, [r3, #0]
 353 002e 92F82120 		ldrb	r2, [r2, #33]	@ zero_extendqisi2
 354 0032 AA70     		strb	r2, [r5, #2]
 355 0034 1B68     		ldr	r3, [r3, #0]
 356 0036 93F82230 		ldrb	r3, [r3, #34]	@ zero_extendqisi2
 256:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****     return MAL_OK;
 357              		.loc 1 256 0
 358 003a 2046     		mov	r0, r4
 359              	.LVL29:
 253:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****       SET_POLLING_TIMING(tMALTab[memIdx]->WriteTiming);
 360              		.loc 1 253 0
 361 003c EB70     		strb	r3, [r5, #3]
 362 003e 38BD     		pop	{r3, r4, r5, pc}
 363              	.LVL30:
 364              	.L33:
 260:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c ****     return MAL_FAIL;
 365              		.loc 1 260 0
 366 0040 0120     		movs	r0, #1
 367              	.LVL31:
 262:Libraries/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c **** }
 368              		.loc 1 262 0
 369 0042 38BD     		pop	{r3, r4, r5, pc}
 370              	.L35:
 371              		.align	2
 372              	.L34:
 373 0044 00000000 		.word	.LANCHOR0
 374              		.cfi_endproc
 375              	.LFE115:
 377              		.comm	MAL_Buffer,1024,1
 378              		.global	usbd_dfu_StringDesc
 379              		.global	tMALTab
 380              		.section	.data.tMALTab,"aw",%progbits
 381              		.align	2
 382              		.set	.LANCHOR0,. + 0
 385              	tMALTab:
 386 0000 00000000 		.word	DFU_Flash_cb
 387              		.section	.rodata.str1.1,"aMS",%progbits,1
 388              	.LC0:
 389 0000 40496E74 		.ascii	"@Internal Flash   /0x08000000/03*016Ka,01*016Kg,01*"
 389      65726E61 
 389      6C20466C 
 389      61736820 
 389      20202F30 
 390 0033 3036344B 		.ascii	"064Kg,07*128Kg\000"
 390      672C3037 
 390      2A313238 
 390      4B6700
 391              		.section	.data.usbd_dfu_StringDesc,"aw",%progbits
 392              		.align	2
 395              	usbd_dfu_StringDesc:
 396 0000 00000000 		.word	.LC0
 397              		.text
 398              	.Letext0:
 399              		.file 2 "c:\\program files\\gnu tools arm embedded\\4.6 2012q4\\bin\\../lib/gcc/arm-none-eabi/4.6.
 400              		.file 3 "./Libraries/STM32_USB_Device_Library/Class/dfu/inc/usbd_dfu_mal.h"
 401              		.file 4 "./Libraries/CMSIS//Include/core_cm4.h"
 402              		.file 5 "./Libraries/STM32_USB_Device_Library/Class/dfu/inc/usbd_flash_if.h"
DEFINED SYMBOLS
                            *ABS*:00000000 usbd_dfu_mal.c
C:\Users\zhx\AppData\Local\Temp\ccmk7zql.s:20     .text.MAL_CheckAdd:00000000 $t
C:\Users\zhx\AppData\Local\Temp\ccmk7zql.s:24     .text.MAL_CheckAdd:00000000 MAL_CheckAdd
C:\Users\zhx\AppData\Local\Temp\ccmk7zql.s:51     .text.MAL_CheckAdd:00000014 $d
C:\Users\zhx\AppData\Local\Temp\ccmk7zql.s:56     .text.MAL_Init:00000000 $t
C:\Users\zhx\AppData\Local\Temp\ccmk7zql.s:61     .text.MAL_Init:00000000 MAL_Init
C:\Users\zhx\AppData\Local\Temp\ccmk7zql.s:88     .text.MAL_Init:00000010 $d
C:\Users\zhx\AppData\Local\Temp\ccmk7zql.s:93     .text.MAL_DeInit:00000000 $t
C:\Users\zhx\AppData\Local\Temp\ccmk7zql.s:98     .text.MAL_DeInit:00000000 MAL_DeInit
C:\Users\zhx\AppData\Local\Temp\ccmk7zql.s:125    .text.MAL_DeInit:00000010 $d
C:\Users\zhx\AppData\Local\Temp\ccmk7zql.s:130    .text.MAL_Erase:00000000 $t
C:\Users\zhx\AppData\Local\Temp\ccmk7zql.s:135    .text.MAL_Erase:00000000 MAL_Erase
C:\Users\zhx\AppData\Local\Temp\ccmk7zql.s:180    .text.MAL_Erase:00000020 $d
C:\Users\zhx\AppData\Local\Temp\ccmk7zql.s:185    .text.MAL_Write:00000000 $t
C:\Users\zhx\AppData\Local\Temp\ccmk7zql.s:190    .text.MAL_Write:00000000 MAL_Write
C:\Users\zhx\AppData\Local\Temp\ccmk7zql.s:239    .text.MAL_Write:00000024 $d
C:\Users\zhx\AppData\Local\Temp\ccmk7zql.s:244    .text.MAL_Read:00000000 $t
C:\Users\zhx\AppData\Local\Temp\ccmk7zql.s:249    .text.MAL_Read:00000000 MAL_Read
C:\Users\zhx\AppData\Local\Temp\ccmk7zql.s:298    .text.MAL_Read:00000024 $d
                            *COM*:00000400 MAL_Buffer
C:\Users\zhx\AppData\Local\Temp\ccmk7zql.s:304    .text.MAL_GetStatus:00000000 $t
C:\Users\zhx\AppData\Local\Temp\ccmk7zql.s:309    .text.MAL_GetStatus:00000000 MAL_GetStatus
C:\Users\zhx\AppData\Local\Temp\ccmk7zql.s:373    .text.MAL_GetStatus:00000044 $d
C:\Users\zhx\AppData\Local\Temp\ccmk7zql.s:395    .data.usbd_dfu_StringDesc:00000000 usbd_dfu_StringDesc
C:\Users\zhx\AppData\Local\Temp\ccmk7zql.s:385    .data.tMALTab:00000000 tMALTab
C:\Users\zhx\AppData\Local\Temp\ccmk7zql.s:381    .data.tMALTab:00000000 $d
C:\Users\zhx\AppData\Local\Temp\ccmk7zql.s:392    .data.usbd_dfu_StringDesc:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
DFU_Flash_cb
